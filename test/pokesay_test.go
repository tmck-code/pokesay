package test

import (
	"embed"
	"fmt"
	"strings"
	"testing"

	"github.com/tmck-code/pokesay/src/pokedex"
	"github.com/tmck-code/pokesay/src/pokesay"
)

var (
	//go:embed data/total.txt
	GOBTotal []byte
	//go:embed data/cows/*.metadata
	GOBCowNames embed.FS
	//go:embed all:data/categories
	GOBCategories embed.FS
)

func TestChooseByName(test *testing.T) {
	names := make(map[string][]int)
	names["hoothoot"] = []int{4}
	result, _ := pokesay.ChooseByName(
		names,
		"hoothoot",
		GOBCowNames,
		"data/cows",
	)

	expected := pokedex.PokemonMetadata{
		Name:             "Hoothoot",
		JapaneseName:     "ãƒ›ãƒ¼ãƒ›ãƒ¼",
		JapanesePhonetic: "ho-ho-",
		Entries: []pokedex.PokemonEntryMapping{
			{EntryIndex: 1586, Categories: []string{"small", "gen7x", "shiny"}},
			{EntryIndex: 2960, Categories: []string{"small", "gen8", "regular"}},
			{EntryIndex: 4285, Categories: []string{"small", "gen8", "shiny"}},
			{EntryIndex: 428, Categories: []string{"small", "gen7x", "regular"}},
		},
	}

	Assert(expected, result, test)
}

func TestChooseByCategory(test *testing.T) {
	dir, _ := GOBCategories.ReadDir("data/categories/small")

	metadata, entry := pokesay.ChooseByCategory(
		"small",
		dir,
		GOBCategories,
		"data/categories",
		GOBCowNames,
		"data/cows",
	)

	expectedMetadata := pokedex.PokemonMetadata{
		Name:             "Hoothoot",
		JapaneseName:     "ãƒ›ãƒ¼ãƒ›ãƒ¼",
		JapanesePhonetic: "ho-ho-",
		Entries: []pokedex.PokemonEntryMapping{
			{EntryIndex: 1586, Categories: []string{"small", "gen7x", "shiny"}},
			{EntryIndex: 2960, Categories: []string{"small", "gen8", "regular"}},
			{EntryIndex: 4285, Categories: []string{"small", "gen8", "shiny"}},
			{EntryIndex: 428, Categories: []string{"small", "gen7x", "regular"}},
		},
	}

	expectedEntry := pokedex.PokemonEntryMapping{
		EntryIndex: 2960,
		Categories: []string{"small", "gen8", "regular"},
	}

	Assert(expectedMetadata, metadata, test)
	Assert(expectedEntry, entry, test)
}

func TestChooseByNameAndCategory(test *testing.T) {
	names := make(map[string][]int)
	names["hoothoot"] = []int{4}
	metadata, entry := pokesay.ChooseByNameAndCategory(
		names,
		"hoothoot",
		GOBCowNames,
		"data/cows",
		"small",
	)

	Assert("small", entry.Categories[0], test)
	Assert("Hoothoot", metadata.Name, test)
}

func TestChooseByRandomIndex(test *testing.T) {
	resultTotal, result := pokesay.ChooseByRandomIndex(GOBTotal)
	Assert(9, resultTotal, test)

	Assert(0 <= result, true, test)
	Assert(9 >= result, true, test)
}

func TestUnicodeStringLength(test *testing.T) {
	msg := []string{
		" â–„  â–ˆ â–„â–ˆâ–ˆâ–ˆâ–„   â–ˆ    â–ˆ    â–ˆâ–ˆâ–ˆâ–ˆâ–„       â–„ â–„   â–ˆâ–ˆâ–ˆâ–ˆâ–„ â–ˆâ–„â–„â–„â–„ â–ˆ     â–ˆâ–ˆâ–„",   // 63
		"â–ˆ   â–ˆ â–ˆâ–€   â–€  â–ˆ    â–ˆ    â–ˆ   â–ˆ      â–ˆ   â–ˆ  â–ˆ   â–ˆ â–ˆ  â–„â–€ â–ˆ     â–ˆ  â–ˆ",  // 64
		"â–ˆâ–ˆâ–€â–€â–ˆ â–ˆâ–ˆâ–„â–„    â–ˆ    â–ˆ    â–ˆ   â–ˆ     â–ˆ â–„   â–ˆ â–ˆ   â–ˆ â–ˆâ–€â–€â–Œ  â–ˆ     â–ˆ   â–ˆ", // 65
		"â–ˆ   â–ˆ â–ˆâ–„   â–„â–€ â–ˆâ–ˆâ–ˆâ–„ â–ˆâ–ˆâ–ˆâ–„ â–€â–ˆâ–ˆâ–ˆâ–ˆ     â–ˆ  â–ˆ  â–ˆ â–€â–ˆâ–ˆâ–ˆâ–ˆ â–ˆ  â–ˆ  â–ˆâ–ˆâ–ˆâ–„  â–ˆ  â–ˆ",  // 64
		"   â–ˆ  â–€â–ˆâ–ˆâ–ˆâ–€       â–€    â–€           â–ˆ â–ˆ â–ˆ          â–ˆ       â–€ â–ˆâ–ˆâ–ˆâ–€",  // 64
		"  â–€                                 â–€ â–€          â–€",                // 50
	}
	expected := []int{63, 64, 65, 64, 64, 50}
	results := make([]int, len(msg))
	for i, line := range msg {
		results[i] = pokesay.UnicodeStringLength(line)
	}
	Assert(expected, results, test)
}

func TestTokeniseANSIString(test *testing.T) {
	line := "[38;5;129mAAA [48;5;160m XX [0m"

	expected := []pokesay.ANSILineToken{
		pokesay.ANSILineToken{Colour: "[38;5;129m", Text: "AAA "},
		pokesay.ANSILineToken{Colour: "[48;5;160m[38;5;129m", Text: " XX "},
		pokesay.ANSILineToken{Colour: "[0m", Text: ""},
	}
	result := pokesay.TokeniseANSIString(line)
	Assert(expected, result, test)
}

func TestFlipHorizontalLine(test *testing.T) {
	// The AAA has a purple fg
	// The XX has a red bg
	line := "[38;5;129mAAA [48;5;160m XY [0m"

	// The AAA should still have a purple fg
	// The XX should still have a red bg
	expected := "[0m[48;5;160m\x1b[38;5;129m YX \033[0m[38;5;129m AAA"
	result := pokesay.ReverseANSIString(line)

	Assert(expected, result, test)
}

func TestTokeniseANSIStringWithNoColour(test *testing.T) {
	msg := "         â–„â–„          â–„â–„"
	expected := []pokesay.ANSILineToken{
		pokesay.ANSILineToken{Colour: "", Text: "         â–„â–„          â–„â–„"},
	}
	result := pokesay.TokeniseANSIString(msg)
	Assert(expected, result, test)
}

func TestReverseUnicodeString(test *testing.T) {
	msg := "         â–„â–„          â–„â–„"
	expected := "â–„â–„          â–„â–„         "
	result := pokesay.ReverseUnicodeString(msg)
	Assert(expected, result, test)
}

func TestFlipHorizontalWithoutColour(test *testing.T) {
	msg := []string{
		"         â–„â–„          â–„â–„",
		"        â–„â–„â–„     â–„â–„â–„â–„â–„â–„ â–„â–„",
		"       â–„  â–„â–€ â–„â–„â–„  â–„â–„   â–„â–€",
		"     â–„â–„â–„   â–„â–„  â–„â–„    â–„â–€",
		"    â–„â–„   â–„â–„â–„  â–„ â–€â–„  â–„â–„",
		"    â–€â–„â–„   â–„â–„â–„   â–„â–„â–„ â–„â–€",
		"    â–€â–„â–„â–„â–„â–„ â–„â–„   â–„â–„â–„â–„â–„",
		"           â–„â–„â–„â–„  â–„â–„â–€",
		"         â–€â–„â–„â–„    â–„â–€",
		"             â–€â–€â–„â–€",
	}
	fmt.Println("msg:", msg)
	expected := []string{
		"  â–„â–„          â–„â–„         ",
		"â–„â–„ â–„â–„â–„â–„â–„â–„     â–„â–„â–„        ",
		"â–€â–„   â–„â–„  â–„â–„â–„ â–€â–„  â–„       ",
		"  â–€â–„    â–„â–„  â–„â–„   â–„â–„â–„     ",
		"   â–„â–„  â–„â–€ â–„  â–„â–„â–„   â–„â–„    ",
		"   â–€â–„ â–„â–„â–„   â–„â–„â–„   â–„â–„â–€    ",
		"    â–„â–„â–„â–„â–„   â–„â–„ â–„â–„â–„â–„â–„â–€    ",
		"     â–€â–„â–„  â–„â–„â–„â–„           ",
		"      â–€â–„    â–„â–„â–„â–€         ",
		"        â–€â–„â–€â–€             ",
	}
	results := pokesay.ReverseANSIStrings(msg)

	for i := 0; i < len(expected); i++ {
		Assert(expected[i], results[i], test)
	}

	Assert(expected, results, test)
}

func TestFlipHorizontalWithColourContinuation(test *testing.T) {
	msg := []string{
		"\x1b[38;5;160mâ–„ \x1b[38;5;46mâ–„",
		"â–„ \x1b[38;5;190mâ–„",
	}

	result := pokesay.ReverseANSIStrings(msg)

	expected := []string{
		"\x1b[38;5;46mâ–„ \x1b[38;5;160mâ–„",
		"\x1b[38;5;190mâ–„ \x1b[38;5;46mâ–„",
	}

	data := map[string]string{
		"msg":      strings.Join(msg, "\n"),
		"expected": strings.Join(expected, "\n"),
		"result":   strings.Join(result, "\n"),
	}

	for msg, d := range data {
		fmt.Printf("%s:\n%s\x1b[0m\n%#v\n", msg, d, d)
	}

	Assert(expected, result, test)
}

func TestFlipHorizontal(test *testing.T) {
	msg := []string{
		"    \x1b[49m     \x1b[38;5;16mâ–„\x1b[48;5;16m\x1b[38;5;232mâ–„ \x1b[49m         \x1b[38;5;16mâ–„â–„",
		"        â–„\x1b[48;5;16m\x1b[38;5;94mâ–„\x1b[48;5;232mâ–„\x1b[48;5;16m \x1b[49m    \x1b[38;5;16mâ–„â–„â–„â–„\x1b[48;5;16m\x1b[38;5;214mâ–„\x1b[48;5;214m\x1b[38;5;94mâ–„\x1b[48;5;94m \x1b[48;5;16mâ–„\x1b[49m\x1b[38;5;16mâ–„",
		"       â–„\x1b[48;5;16m \x1b[48;5;94m \x1b[48;5;58mâ–„\x1b[49mâ–€ â–„\x1b[48;5;16m\x1b[38;5;214mâ–„â–„\x1b[48;5;232m  \x1b[38;5;94mâ–„\x1b[48;5;214mâ–„\x1b[48;5;94m   \x1b[38;5;16mâ–„\x1b[49mâ–€",
		"     â–„\x1b[48;5;16m\x1b[38;5;214mâ–„\x1b[48;5;94mâ–„\x1b[48;5;214m   \x1b[48;5;16mâ–„\x1b[38;5;58mâ–„\x1b[48;5;214m  \x1b[38;5;232mâ–„\x1b[48;5;232m\x1b[38;5;94mâ–„\x1b[48;5;94m    \x1b[38;5;16mâ–„\x1b[49mâ–€",
		"    â–„\x1b[48;5;16m\x1b[38;5;214mâ–„\x1b[48;5;214m   \x1b[38;5;94mâ–„\x1b[48;5;94m\x1b[38;5;231mâ–„\x1b[48;5;214m\x1b[38;5;16mâ–„  \x1b[48;5;58m\x1b[38;5;214mâ–„\x1b[48;5;16m \x1b[49m\x1b[38;5;16mâ–€\x1b[48;5;94mâ–„  \x1b[48;5;16m\x1b[38;5;94mâ–„\x1b[49m\x1b[38;5;16mâ–„",
		"    â–€\x1b[48;5;214mâ–„\x1b[48;5;58m\x1b[38;5;214mâ–„\x1b[48;5;214m   \x1b[48;5;16mâ–„\x1b[48;5;232m\x1b[38;5;196mâ–„\x1b[48;5;214mâ–„   \x1b[48;5;16m\x1b[38;5;214mâ–„\x1b[49m\x1b[38;5;16mâ–„\x1b[48;5;16m\x1b[38;5;94mâ–„\x1b[48;5;94m \x1b[38;5;16mâ–„\x1b[49mâ–€",
		"    â–€\x1b[48;5;94mâ–„\x1b[48;5;232mâ–„\x1b[48;5;94mâ–„\x1b[48;5;214m\x1b[38;5;94mâ–„â–„ \x1b[48;5;196m\x1b[38;5;214mâ–„\x1b[38;5;232mâ–„\x1b[48;5;214m   \x1b[48;5;88m\x1b[38;5;214mâ–„\x1b[48;5;232mâ–„\x1b[48;5;52m\x1b[38;5;232mâ–„\x1b[48;5;16m\x1b[38;5;52mâ–„\x1b[49m\x1b[38;5;16mâ–„",
		"        \x1b[48;5;16m \x1b[48;5;94m  \x1b[48;5;232m\x1b[38;5;94mâ–„\x1b[48;5;214m\x1b[38;5;232mâ–„â–„\x1b[48;5;232m\x1b[38;5;214mâ–„\x1b[48;5;214m  \x1b[48;5;88mâ–„\x1b[48;5;232m\x1b[38;5;16mâ–„\x1b[49mâ–€",
		"         â–€\x1b[48;5;94mâ–„â–„\x1b[48;5;214mâ–„    \x1b[48;5;232mâ–„\x1b[49mâ–€",
		"             â–€â–€\x1b[48;5;214mâ–„\x1b[49mâ–€\x1b[39m\x1b[39m",
	}
	fmt.Println("msg:", msg)
	results := pokesay.ReverseANSIStrings(msg)

	expected := []string{
		"  \x1b[38;5;16mâ–„â–„\x1b[0m         \x1b[0m\x1b[48;5;16m\x1b[38;5;232m â–„\x1b[0m\x1b[38;5;16mâ–„\x1b[0m     \x1b[0m    ",
		"\x1b[38;5;16mâ–„\x1b[0m\x1b[48;5;16m\x1b[38;5;94mâ–„\x1b[0m\x1b[48;5;94m\x1b[38;5;94m \x1b[0m\x1b[48;5;214m\x1b[38;5;94mâ–„\x1b[0m\x1b[48;5;16m\x1b[38;5;214mâ–„\x1b[0m\x1b[38;5;16mâ–„â–„â–„â–„\x1b[0m    \x1b[0m\x1b[48;5;16m\x1b[38;5;94m \x1b[0m\x1b[48;5;232m\x1b[38;5;94mâ–„\x1b[0m\x1b[48;5;16m\x1b[38;5;94mâ–„\x1b[0mâ–„        ",
		"\x1b[49mâ–€\x1b[0m\x1b[48;5;94m\x1b[38;5;16mâ–„\x1b[0m\x1b[48;5;94m\x1b[38;5;94m   \x1b[0m\x1b[48;5;214m\x1b[38;5;94mâ–„\x1b[0m\x1b[48;5;232m\x1b[38;5;94mâ–„\x1b[0m\x1b[48;5;232m\x1b[38;5;214m  \x1b[0m\x1b[48;5;16m\x1b[38;5;214mâ–„â–„\x1b[0mâ–„ â–€\x1b[0m\x1b[48;5;58mâ–„\x1b[0m\x1b[48;5;94m \x1b[0m\x1b[48;5;16m \x1b[0mâ–„       ",
		"  \x1b[49mâ–€\x1b[0m\x1b[48;5;94m\x1b[38;5;16mâ–„\x1b[0m\x1b[48;5;94m\x1b[38;5;94m    \x1b[0m\x1b[48;5;232m\x1b[38;5;94mâ–„\x1b[0m\x1b[48;5;214m\x1b[38;5;232mâ–„\x1b[0m\x1b[48;5;214m\x1b[38;5;58m  \x1b[0m\x1b[48;5;16m\x1b[38;5;58mâ–„\x1b[0m\x1b[48;5;16m\x1b[38;5;214mâ–„\x1b[0m\x1b[48;5;214m\x1b[38;5;214m   \x1b[0m\x1b[48;5;94m\x1b[38;5;214mâ–„\x1b[0m\x1b[48;5;16m\x1b[38;5;214mâ–„\x1b[0mâ–„     ",
		"   \x1b[38;5;16mâ–„\x1b[0m\x1b[48;5;16m\x1b[38;5;94mâ–„\x1b[0m\x1b[48;5;94m\x1b[38;5;16m  â–„\x1b[0m\x1b[38;5;16mâ–€\x1b[0m\x1b[48;5;16m\x1b[38;5;214m \x1b[0m\x1b[48;5;58m\x1b[38;5;214mâ–„\x1b[0m\x1b[48;5;214m\x1b[38;5;16m  â–„\x1b[0m\x1b[48;5;94m\x1b[38;5;231mâ–„\x1b[0m\x1b[48;5;214m\x1b[38;5;94mâ–„\x1b[0m\x1b[48;5;214m\x1b[38;5;214m   \x1b[0m\x1b[48;5;16m\x1b[38;5;214mâ–„\x1b[0mâ–„    ",
		"   \x1b[49mâ–€\x1b[0m\x1b[48;5;94m\x1b[38;5;16mâ–„\x1b[0m\x1b[48;5;94m\x1b[38;5;94m \x1b[0m\x1b[48;5;16m\x1b[38;5;94mâ–„\x1b[0m\x1b[38;5;16mâ–„\x1b[0m\x1b[48;5;16m\x1b[38;5;214mâ–„\x1b[0m\x1b[48;5;214m\x1b[38;5;196m   â–„\x1b[0m\x1b[48;5;232m\x1b[38;5;196mâ–„\x1b[0m\x1b[48;5;16m\x1b[38;5;214mâ–„\x1b[0m\x1b[48;5;214m\x1b[38;5;214m   \x1b[0m\x1b[48;5;58m\x1b[38;5;214mâ–„\x1b[0m\x1b[48;5;214mâ–„\x1b[0mâ–€    ",
		"    \x1b[38;5;16mâ–„\x1b[0m\x1b[48;5;16m\x1b[38;5;52mâ–„\x1b[0m\x1b[48;5;52m\x1b[38;5;232mâ–„\x1b[0m\x1b[48;5;232m\x1b[38;5;214mâ–„\x1b[0m\x1b[48;5;88m\x1b[38;5;214mâ–„\x1b[0m\x1b[48;5;214m\x1b[38;5;232m   \x1b[0m\x1b[48;5;196m\x1b[38;5;232mâ–„\x1b[0m\x1b[48;5;196m\x1b[38;5;214mâ–„\x1b[0m\x1b[48;5;214m\x1b[38;5;94m â–„â–„\x1b[0m\x1b[48;5;94mâ–„\x1b[0m\x1b[48;5;232mâ–„\x1b[0m\x1b[48;5;94mâ–„\x1b[0mâ–€    ",
		"     \x1b[49mâ–€\x1b[0m\x1b[48;5;232m\x1b[38;5;16mâ–„\x1b[0m\x1b[48;5;88m\x1b[38;5;214mâ–„\x1b[0m\x1b[48;5;214m\x1b[38;5;214m  \x1b[0m\x1b[48;5;232m\x1b[38;5;214mâ–„\x1b[0m\x1b[48;5;214m\x1b[38;5;232mâ–„â–„\x1b[0m\x1b[48;5;232m\x1b[38;5;94mâ–„\x1b[0m\x1b[48;5;94m  \x1b[0m\x1b[48;5;16m \x1b[0m        ",
		"      \x1b[49mâ–€\x1b[0m\x1b[48;5;232mâ–„\x1b[0m\x1b[48;5;214m    â–„\x1b[0m\x1b[48;5;94mâ–„â–„\x1b[0mâ–€         ",
		"        \x1b[39m\x1b[0mâ–€\x1b[0m\x1b[48;5;214mâ–„\x1b[0mâ–€â–€             ",
	}
	for i, line := range msg {
		fmt.Println("msg:", i, line)
	}
	for i, line := range expected {
		fmt.Println("expected:", i, line)
	}
	for i, line := range results {
		fmt.Println("results:", i, line)
	}
	for i := 0; i < len(expected); i++ {
		Assert(expected[i], results[i], test)
	}
	Assert(expected, results, test)
}
