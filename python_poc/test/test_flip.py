from .. import flip

import sys
from itertools import chain

def print_tokens(expected, result):
    sys.stdout.write('\n'+'\n'.join(['expected:', *list(''.join(chain.from_iterable(el)) for el in expected)]) + '\n')
    sys.stdout.write('\n'+'\n'.join(['result:', *list(''.join(chain.from_iterable(el)) for el in result)]) + '\n')


class TestLineContinuation:

    def test_tokenise_top(self):
        expected = [
            [
                ( '', '    ',),
                ( '\x1b[49m', '   ',),
                ( '\x1b[38;5;16m\x1b[49m', '▄▄',),
                ( '\x1b[38;5;142m\x1b[48;5;16m', '▄▄▄',),
                ( '\x1b[38;5;16m\x1b[49m', '▄▄',),
            ],
            [
                ( '\x1b[38;5;16m\x1b[49m', '     ▄',),
                ( '\x1b[38;5;58m\x1b[48;5;16m', '▄',),
                ( '\x1b[38;5;70m\x1b[48;5;58m', '▄',),
                ( '\x1b[38;5;70m\x1b[48;5;70m', ' ',),
                ( '\x1b[38;5;70m\x1b[48;5;227m', '    ',),
                ( '\x1b[38;5;227m\x1b[48;5;237m', '▄',),
                ( '\x1b[38;5;237m\x1b[48;5;16m', '▄',),
                ( '\x1b[38;5;16m\x1b[49m', '▄',),
            ],
        ]
        result = list(flip.tokenise_ansi(open('test/data/1_2.cow').read()))

        print_tokens(expected, result)

        assert result == expected


    def test_tokenise_bottom(self):
        expected = [
            [
                ( '', '    ',),
                ( '\x1b[48;5;16m', ' ',),
                ( '\x1b[38;5;237m\x1b[48;5;142m', '▄',),
                ( '\x1b[38;5;142m\x1b[48;5;227m', '▄',),
                ( '\x1b[38;5;142m\x1b[48;5;70m', '  ',),
                ( '\x1b[38;5;142m\x1b[48;5;227m', '▄▄',),
                ( '\x1b[38;5;58m\x1b[48;5;227m', '▄',),
                ( '\x1b[38;5;58m\x1b[48;5;142m', '▄▄ ',),
                ( '\x1b[38;5;237m\x1b[48;5;142m', '▄',),
                ( '\x1b[38;5;237m\x1b[48;5;16m', ' ',),
                ( '\x1b[38;5;237m\x1b[49m', '',),
            ],
            [
                ( '\x1b[38;5;237m\x1b[49m', '     ',),
                ( '\x1b[38;5;237m\x1b[48;5;16m', ' ',),
                ( '\x1b[38;5;237m\x1b[48;5;142m', '▄   ',),
                ( '\x1b[38;5;237m\x1b[48;5;58m', '    ',),
                ( '\x1b[38;5;234m\x1b[48;5;58m', '▄',),
                ( '\x1b[38;5;234m\x1b[48;5;16m', ' ',),
                ( '\x1b[38;5;234m\x1b[49m', '',),
            ],
            [
                ( '\x1b[38;5;234m\x1b[49m', '      ',),
                ( '\x1b[38;5;16m\x1b[49m', '▀▀',),
                ( '\x1b[38;5;16m\x1b[48;5;142m', '▄▄▄',),
                ( '\x1b[38;5;16m\x1b[48;5;58m', '▄▄',),
                ( '\x1b[38;5;16m\x1b[49m', '▀▀',),
                ( '\x1b[39m\x1b[49m', '',),
            ],
            [],
        ]
        result = list(flip.tokenise_ansi(open('test/data/1_3.cow').read()))

        print_tokens(expected, result)

        assert result == expected

    def test_reverse(self):
        expected = [
            [
                ( '', '',),
                ( '\x1b[38;5;237m\x1b[49m', '',),
                ( '\x1b[38;5;237m\x1b[48;5;16m', ' ',),
                ( '\x1b[38;5;237m\x1b[48;5;142m', '▄',),
                ( '\x1b[38;5;58m\x1b[48;5;142m', ' ▄▄',),
                ( '\x1b[38;5;58m\x1b[48;5;227m', '▄',),
                ( '\x1b[38;5;142m\x1b[48;5;227m', '▄▄',),
                ( '\x1b[38;5;142m\x1b[48;5;70m', '  ',),
                ( '\x1b[38;5;142m\x1b[48;5;227m', '▄',),
                ( '\x1b[38;5;237m\x1b[48;5;142m', '▄',),
                ( '\x1b[48;5;16m', ' ',),
                ( '\x1b[49m', '    ',),
            ],
            [
                ( '', ' ',),
                ( '\x1b[38;5;234m\x1b[49m', '',),
                ( '\x1b[38;5;234m\x1b[48;5;16m', ' ',),
                ( '\x1b[38;5;234m\x1b[48;5;58m', '▄',),
                ( '\x1b[38;5;237m\x1b[48;5;58m', '    ',),
                ( '\x1b[38;5;237m\x1b[48;5;142m', '   ▄',),
                ( '\x1b[38;5;237m\x1b[48;5;16m', ' ',),
                ( '\x1b[38;5;237m\x1b[49m\x1b[49m', '     ',),
            ],
            [
                ( '', '  ',),
                ( '\x1b[39m\x1b[49m', '',),
                ( '\x1b[38;5;16m\x1b[49m', '▀▀',),
                ( '\x1b[38;5;16m\x1b[48;5;58m', '▄▄',),
                ( '\x1b[38;5;16m\x1b[48;5;142m', '▄▄▄',),
                ( '\x1b[38;5;16m\x1b[49m', '▀▀',),
                ( '\x1b[38;5;234m\x1b[49m\x1b[49m', '      ',),
            ],
            [
                ( '\x1b[49m', '                 ',),
            ],
        ]
        result = list(flip.reverse_ansi(open('test/data/1_3.cow').read()))
        print_tokens(expected, result)
        assert result == expected


class TestUmbreon:


    def test_tokenise_umbreon(self):
        expected = [
            [ ( '', '    ',), ( '\x1b[49m', '   ',), ( '\x1b[38;5;16m\x1b[49m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;16m', '▄▄ ',), ( '\x1b[38;5;237m\x1b[49m', '',), ],
            [ ( '\x1b[38;5;237m\x1b[49m', '      ',), ( '\x1b[38;5;237m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;237m\x1b[48;5;214m', '▄ ',), ( '\x1b[38;5;214m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;214m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;214m\x1b[49m', ' ',), ( '\x1b[38;5;16m\x1b[49m', '▄▄',), ( '\x1b[38;5;237m\x1b[48;5;16m', '▄▄▄ ',), ( '\x1b[38;5;237m\x1b[49m', '   ',), ( '\x1b[38;5;16m\x1b[49m', '▄▄▄',), ],
            [ ( '\x1b[38;5;16m\x1b[49m', '     ',), ( '\x1b[38;5;16m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;16m\x1b[48;5;237m', ' ',), ( '\x1b[38;5;232m\x1b[48;5;237m', '▄▄',), ( '\x1b[38;5;232m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;16m\x1b[49m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;94m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;214m', ' ',), ( '\x1b[38;5;214m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;16m\x1b[48;5;232m', '▄',), ( '\x1b[38;5;16m\x1b[49m', '▀ ▄',), ( '\x1b[38;5;214m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;94m\x1b[48;5;235m', '▄ ',), ( '\x1b[38;5;94m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;94m\x1b[49m', '',), ],
            [ ( '\x1b[38;5;94m\x1b[49m', '     ',), ( '\x1b[38;5;94m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;214m\x1b[48;5;232m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;214m', '▄',), ( '\x1b[38;5;214m\x1b[48;5;237m', '▄  ',), ( '\x1b[38;5;237m\x1b[48;5;232m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;235m', ' ',), ( '\x1b[38;5;16m\x1b[48;5;94m', '▄',), ( '\x1b[38;5;16m\x1b[49m', '▀  ',), ( '\x1b[38;5;16m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;235m\x1b[48;5;94m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;214m', '▄ ',), ( '\x1b[38;5;16m\x1b[48;5;94m', '▄',), ( '\x1b[38;5;16m\x1b[49m', '▀',), ],
            [ ( '\x1b[38;5;16m\x1b[49m', '    ',), ( '\x1b[38;5;16m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;52m\x1b[48;5;231m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;214m', '▄',), ( '\x1b[38;5;214m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;214m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;231m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;16m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;235m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;16m\x1b[49m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;16m', '▄▄',), ( '\x1b[38;5;232m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;232m\x1b[48;5;235m', ' ',), ( '\x1b[38;5;16m\x1b[48;5;235m', '▄▄',), ( '\x1b[38;5;16m\x1b[49m', '▀',), ],
            [ ( '\x1b[38;5;16m\x1b[49m', '    ',), ( '\x1b[38;5;16m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;237m\x1b[48;5;232m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;237m', '  ',), ( '\x1b[38;5;235m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;52m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;16m\x1b[48;5;196m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;232m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;232m\x1b[48;5;232m', ' ',), ( '\x1b[38;5;235m\x1b[48;5;232m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;235m', '  ',), ( '\x1b[38;5;214m\x1b[48;5;235m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;16m\x1b[49m', '▄',), ],
            [ ( '\x1b[38;5;16m\x1b[49m', '     ▀',), ( '\x1b[38;5;16m\x1b[48;5;239m', '▄',), ( '\x1b[38;5;16m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;232m\x1b[48;5;237m', '▄▄',), ( '\x1b[38;5;232m\x1b[48;5;235m', ' ',), ( '\x1b[38;5;235m\x1b[48;5;232m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;235m', '    ',), ( '\x1b[38;5;235m\x1b[48;5;214m', ' ',), ( '\x1b[38;5;235m\x1b[48;5;235m', ' ',), ( '\x1b[38;5;235m\x1b[48;5;214m', ' ',), ( '\x1b[38;5;232m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;16m\x1b[49m', '▄',), ],
            [ ( '\x1b[38;5;16m\x1b[49m', '       ',), ( '\x1b[38;5;16m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;16m\x1b[48;5;235m', '  ',), ( '\x1b[38;5;214m\x1b[48;5;235m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;214m', '▄',), ( '\x1b[38;5;94m\x1b[48;5;235m', '▄',), ( '\x1b[38;5;16m\x1b[48;5;235m', '▄',), ( '\x1b[38;5;16m\x1b[48;5;232m', '▄',), ( '\x1b[38;5;16m\x1b[49m', '▀▀',), ( '\x1b[38;5;16m\x1b[48;5;94m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;232m', '▄▄',), ( '\x1b[38;5;235m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;235m\x1b[49m', '',), ],
            [ ( '\x1b[38;5;235m\x1b[49m', '      ',), ( '\x1b[38;5;16m\x1b[49m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;235m', ' ',), ( '\x1b[38;5;235m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;237m\x1b[48;5;214m', '▄',), ( '\x1b[38;5;94m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;94m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;94m\x1b[49m', '     ',), ( '\x1b[38;5;16m\x1b[49m', '▀▀',), ],
            [ ( '\x1b[38;5;16m\x1b[49m', '      ▀',), ( '\x1b[38;5;16m\x1b[48;5;235m', '▄',), ( '\x1b[38;5;16m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;16m\x1b[48;5;237m', '  ',), ( '\x1b[38;5;16m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;16m\x1b[49m', '',), ],
            [ ( '\x1b[38;5;16m\x1b[49m', '         ▀▀',), ( '\x1b[39m\x1b[49m', '',), ],
            [],
        ]

        result = list(flip.tokenise_ansi(open('test/data/umbreon.cow').read()))
        print_tokens(expected, result)
        assert result == expected


    def test_reverse_umbreon(self):
        expected = [
            [ ( '', '             ',), ( '\x1b[38;5;237m\x1b[49m', '',), ( '\x1b[38;5;237m\x1b[48;5;16m', ' ▄▄',), ( '\x1b[38;5;16m\x1b[49m', '▄',), ( '\x1b[49m', '   ',), ( '\x1b[49m', '    ',), ],
            [ ( '', '',), ( '\x1b[38;5;16m\x1b[49m', '▄▄▄',), ( '\x1b[38;5;237m\x1b[49m', '   ',), ( '\x1b[38;5;237m\x1b[48;5;16m', ' ▄▄▄',), ( '\x1b[38;5;16m\x1b[49m', '▄▄',), ( '\x1b[38;5;214m\x1b[49m', ' ',), ( '\x1b[38;5;214m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;214m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;214m', ' ▄',), ( '\x1b[38;5;237m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;237m\x1b[49m\x1b[49m', '      ',), ],
            [ ( '', '',), ( '\x1b[38;5;94m\x1b[49m', '',), ( '\x1b[38;5;94m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;94m\x1b[48;5;235m', ' ▄',), ( '\x1b[38;5;214m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;16m\x1b[49m', '▄ ▀',), ( '\x1b[38;5;16m\x1b[48;5;232m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;214m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;214m', ' ',), ( '\x1b[38;5;237m\x1b[48;5;94m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;16m\x1b[49m', '▄',), ( '\x1b[38;5;232m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;232m\x1b[48;5;237m', '▄▄',), ( '\x1b[38;5;16m\x1b[48;5;237m', ' ',), ( '\x1b[38;5;16m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;16m\x1b[49m\x1b[49m', '     ',), ],
            [ ( '', '',), ( '\x1b[38;5;16m\x1b[49m', '▀',), ( '\x1b[38;5;16m\x1b[48;5;94m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;214m', ' ▄',), ( '\x1b[38;5;235m\x1b[48;5;94m', '▄',), ( '\x1b[38;5;16m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;16m\x1b[49m', '  ▀',), ( '\x1b[38;5;16m\x1b[48;5;94m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;235m', ' ',), ( '\x1b[38;5;235m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;232m', '▄',), ( '\x1b[38;5;214m\x1b[48;5;237m', '  ▄',), ( '\x1b[38;5;237m\x1b[48;5;214m', '▄',), ( '\x1b[38;5;214m\x1b[48;5;232m', '▄',), ( '\x1b[38;5;94m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;94m\x1b[49m\x1b[49m', '     ',), ],
            [ ( '', '  ',), ( '\x1b[38;5;16m\x1b[49m', '▀',), ( '\x1b[38;5;16m\x1b[48;5;235m', '▄▄',), ( '\x1b[38;5;232m\x1b[48;5;235m', ' ',), ( '\x1b[38;5;232m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;16m', '▄▄',), ( '\x1b[38;5;16m\x1b[49m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;237m\x1b[48;5;235m', '▄',), ( '\x1b[38;5;16m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;231m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;214m', '▄',), ( '\x1b[38;5;214m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;214m', '▄',), ( '\x1b[38;5;52m\x1b[48;5;231m', '▄',), ( '\x1b[38;5;16m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;16m\x1b[49m\x1b[49m', '    ',), ],
            [ ( '', '    ',), ( '\x1b[38;5;16m\x1b[49m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;214m\x1b[48;5;235m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;235m', '  ',), ( '\x1b[38;5;235m\x1b[48;5;232m', '▄',), ( '\x1b[38;5;232m\x1b[48;5;232m', ' ',), ( '\x1b[38;5;232m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;16m\x1b[48;5;196m', '▄',), ( '\x1b[38;5;52m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;237m', '  ',), ( '\x1b[38;5;237m\x1b[48;5;232m', '▄',), ( '\x1b[38;5;16m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;16m\x1b[49m\x1b[49m', '    ',), ],
            [ ( '', '   ',), ( '\x1b[38;5;16m\x1b[49m', '▄',), ( '\x1b[38;5;232m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;214m', ' ',), ( '\x1b[38;5;235m\x1b[48;5;235m', ' ',), ( '\x1b[38;5;235m\x1b[48;5;214m', ' ',), ( '\x1b[38;5;235m\x1b[48;5;235m', '    ',), ( '\x1b[38;5;235m\x1b[48;5;232m', '▄',), ( '\x1b[38;5;232m\x1b[48;5;235m', ' ',), ( '\x1b[38;5;232m\x1b[48;5;237m', '▄▄',), ( '\x1b[38;5;16m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;16m\x1b[48;5;239m', '▄',), ( '\x1b[38;5;16m\x1b[49m', '▀     ',), ],
            [ ( '', '   ',), ( '\x1b[38;5;235m\x1b[49m', '',), ( '\x1b[38;5;235m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;235m\x1b[48;5;232m', '▄▄',), ( '\x1b[38;5;16m\x1b[48;5;94m', '▄',), ( '\x1b[38;5;16m\x1b[49m', '▀▀',), ( '\x1b[38;5;16m\x1b[48;5;232m', '▄',), ( '\x1b[38;5;16m\x1b[48;5;235m', '▄',), ( '\x1b[38;5;94m\x1b[48;5;235m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;214m', '▄',), ( '\x1b[38;5;214m\x1b[48;5;235m', '▄',), ( '\x1b[38;5;16m\x1b[48;5;235m', '  ',), ( '\x1b[38;5;16m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;16m\x1b[49m\x1b[49m', '       ',), ],
            [ ( '', '    ',), ( '\x1b[38;5;16m\x1b[49m', '▀▀',), ( '\x1b[38;5;94m\x1b[49m', '     ',), ( '\x1b[38;5;94m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;94m\x1b[48;5;237m', '▄',), ( '\x1b[38;5;237m\x1b[48;5;214m', '▄',), ( '\x1b[38;5;235m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;235m\x1b[48;5;235m', ' ',), ( '\x1b[38;5;235m\x1b[48;5;16m', '▄',), ( '\x1b[38;5;16m\x1b[49m', '▄',), ( '\x1b[38;5;235m\x1b[49m\x1b[49m', '      ',), ],
            [ ( '', '            ',), ( '\x1b[38;5;16m\x1b[49m', '',), ( '\x1b[38;5;16m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;16m\x1b[48;5;237m', '  ',), ( '\x1b[38;5;16m\x1b[48;5;16m', ' ',), ( '\x1b[38;5;16m\x1b[48;5;235m', '▄',), ( '\x1b[38;5;16m\x1b[49m', '▀      ',), ],
            [ ( '', '             ',), ( '\x1b[39m\x1b[49m', '',), ( '\x1b[38;5;16m\x1b[49m', '▀▀         ',), ],
            [ ( '\x1b[49m', '                        ',), ],
        ]

        result = list(flip.reverse_ansi(open('test/data/umbreon.cow').read()))
        print_tokens(expected, result)
        assert result == expected
